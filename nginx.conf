user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
    include /etc/nginx/conf.d/*.conf;

    # initialize my_ratelimit for rule in default.conf
    lua_shared_dict my_ratelimit 10m;

    init_by_lua_block {

        -- # load json module
        local cjson = require "cjson.safe"

        -- # ratelimit by ip and path
        function set_ratelimit_by_ip_and_path(ip, path, limit, period, lua_dict)
            local key = ip .. path
            local rate, err = lua_dict:get(key)

            if rate then
                if rate >= limit then
                    ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                else
                    lua_dict:incr(key, 1)
                end
            else
                lua_dict:set(key, 1, period)
            end
        end

        -- # get nginx json body
        function get_nginx_json_body()
            ngx.req.read_body() -- explicitly read the req body
	        local body = ngx.req.get_body_data()

            if body then
                 local json_data = cjson.decode(tostring(body)) 
                 return json_data
            end
            return nil
        end

        -- # ratelimit by ip and json key
        function set_ratelimit_by_ip_and_json_key(ip, json_key, limit, period, lua_dict)
            -- # check if http post
            if ngx.var.request_method ~= "POST" then
                return nil
            end

            local path = ngx.var.uri
            local body = get_nginx_json_body()

            if body then

                local key_value = assert(load("return " .. json_key, nil, "t", body))()
		        -- ngx.log(ngx.STDERR, "body = " .. body)

                if key_value then
                    -- ngx.log(ngx.STDERR, "key_value = " .. key_value)

                    local key = ip .. path .. "json" .. json_key .. key_value
                    local rate, err = lua_dict:get(key)
                    if rate then
                        if rate >= limit then
                            ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                        else
                            lua_dict:incr(key, 1)
                        end
                    else
                        lua_dict:set(key, 1, period)
                    end
                end
            end
        end

    } # end init_by_lua_block
}